// <auto-generated />
using System;
using FastTask.TaskItems.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FastTask.TaskItems.Data.Migrations
{
    [DbContext(typeof(TaskItemsDbContext))]
    partial class TaskItemsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("TaskItems")
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FastTask.TaskItems.Entities.TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(7)
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasPrecision(7)
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.ToTable("TaskItems", "TaskItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Create wireframes and technical specifications for user login, registration, and password reset functionality",
                            ItemId = new Guid("f7cb95b9-b1ed-48b8-82c2-bd2495e97d8e"),
                            Status = 0,
                            Title = "Design user authentication system"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Develop REST API endpoints for user management and task operations",
                            ItemId = new Guid("b6781c6f-8dba-4ad9-b1f4-448d28e462b5"),
                            Status = 1,
                            Title = "Implement API endpoints"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Configure automated testing and deployment pipeline using GitHub Actions",
                            ItemId = new Guid("157f3f13-3f09-4579-90bd-2964660f2a84"),
                            Status = 0,
                            Title = "Set up CI/CD pipeline"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Write migration scripts to update production database schema",
                            ItemId = new Guid("69b46755-9d5a-4889-a491-b2611b11eb2c"),
                            Status = 2,
                            Title = "Database migration scripts"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Review pull request #247 for payment processing implementation",
                            ItemId = new Guid("c9d595c4-d174-4566-af43-f2836d724f4a"),
                            Status = 0,
                            Title = "Code review for payment module"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Revise API documentation to reflect recent endpoint changes",
                            ItemId = new Guid("a6bd6b37-4f5c-43d6-aeba-63faa69550c6"),
                            Status = 0,
                            Title = "Update documentation"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Optimize database queries for the dashboard loading time",
                            ItemId = new Guid("f7d414ee-490e-4649-a732-d70dad1a6299"),
                            Status = 0,
                            Title = "Performance optimization"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Conduct security review of authentication and authorization mechanisms",
                            ItemId = new Guid("cb63221d-6cf6-4aea-82b6-100fb690fb5d"),
                            Status = 0,
                            Title = "Security audit"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test mobile application on various devices and screen sizes",
                            ItemId = new Guid("2aaeab2e-5035-4eab-8c4a-688daa257294"),
                            Status = 0,
                            Title = "Mobile app testing"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Prepare demo and presentation materials for upcoming client meeting",
                            ItemId = new Guid("5973cb0f-63c4-4c09-9f8b-8758dfda286a"),
                            Status = 0,
                            Title = "Client presentation preparation"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
